// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels(in *jlexer.Lexer, out *UserMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "isAuthor":
			out.IsAuthor = bool(in.Bool())
		case "about":
			out.About = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels(out *jwriter.Writer, in UserMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"isAuthor\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAuthor))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels1(in *jlexer.Lexer, out *SubscriptionMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authorID":
			out.AuthorID = uint64(in.Uint64())
		case "authorSubscriptionID":
			out.AuthorSubscriptionID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels1(out *jwriter.Writer, in SubscriptionMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"authorID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AuthorID))
	}
	{
		const prefix string = ",\"authorSubscriptionID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorSubscriptionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels1(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels2(in *jlexer.Lexer, out *PostMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "File":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				out.File = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels2(out *jwriter.Writer, in PostMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"File\":"
		out.RawString(prefix)
		out.Base64Bytes(in.File)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels2(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels3(in *jlexer.Lexer, out *ImageMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels3(out *jwriter.Writer, in ImageMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels3(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels4(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels4(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels4(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels5(in *jlexer.Lexer, out *EmptyStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels5(out *jwriter.Writer, in EmptyStruct) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmptyStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmptyStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmptyStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmptyStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels5(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels6(in *jlexer.Lexer, out *DonateMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authorID":
			out.AuthorID = uint64(in.Uint64())
		case "price":
			out.Price = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels6(out *jwriter.Writer, in DonateMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"authorID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AuthorID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DonateMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DonateMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DonateMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DonateMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels6(l, v)
}
func easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels7(in *jlexer.Lexer, out *AuthorSubscriptionMpfd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "img":
			out.Img = string(in.String())
		case "tier":
			out.Tier = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "price":
			out.Price = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels7(out *jwriter.Writer, in AuthorSubscriptionMpfd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"img\":"
		out.RawString(prefix[1:])
		out.String(string(in.Img))
	}
	{
		const prefix string = ",\"tier\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Tier))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthorSubscriptionMpfd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthorSubscriptionMpfd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfc9dea9EncodeGithubComGoParkMailRu20222VDonateInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthorSubscriptionMpfd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthorSubscriptionMpfd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfc9dea9DecodeGithubComGoParkMailRu20222VDonateInternalModels7(l, v)
}
