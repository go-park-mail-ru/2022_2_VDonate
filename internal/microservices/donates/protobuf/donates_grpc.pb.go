// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: internal/microservices/donates/protobuf/donates.proto

package protobuf

import (
	context "context"
	protobuf "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/users/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DonatesClient is the client API for Donates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonatesClient interface {
	SendDonate(ctx context.Context, in *Donate, opts ...grpc.CallOption) (*Donate, error)
	GetDonatesByUserID(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*DonateArray, error)
	GetDonateByID(ctx context.Context, in *DonateID, opts ...grpc.CallOption) (*Donate, error)
}

type donatesClient struct {
	cc grpc.ClientConnInterface
}

func NewDonatesClient(cc grpc.ClientConnInterface) DonatesClient {
	return &donatesClient{cc}
}

func (c *donatesClient) SendDonate(ctx context.Context, in *Donate, opts ...grpc.CallOption) (*Donate, error) {
	out := new(Donate)
	err := c.cc.Invoke(ctx, "/donates.Donates/SendDonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donatesClient) GetDonatesByUserID(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*DonateArray, error) {
	out := new(DonateArray)
	err := c.cc.Invoke(ctx, "/donates.Donates/GetDonatesByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donatesClient) GetDonateByID(ctx context.Context, in *DonateID, opts ...grpc.CallOption) (*Donate, error) {
	out := new(Donate)
	err := c.cc.Invoke(ctx, "/donates.Donates/GetDonateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonatesServer is the server API for Donates service.
// All implementations must embed UnimplementedDonatesServer
// for forward compatibility
type DonatesServer interface {
	SendDonate(context.Context, *Donate) (*Donate, error)
	GetDonatesByUserID(context.Context, *protobuf.UserID) (*DonateArray, error)
	GetDonateByID(context.Context, *DonateID) (*Donate, error)
	mustEmbedUnimplementedDonatesServer()
}

// UnimplementedDonatesServer must be embedded to have forward compatible implementations.
type UnimplementedDonatesServer struct {
}

func (UnimplementedDonatesServer) SendDonate(context.Context, *Donate) (*Donate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDonate not implemented")
}
func (UnimplementedDonatesServer) GetDonatesByUserID(context.Context, *protobuf.UserID) (*DonateArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonatesByUserID not implemented")
}
func (UnimplementedDonatesServer) GetDonateByID(context.Context, *DonateID) (*Donate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonateByID not implemented")
}
func (UnimplementedDonatesServer) mustEmbedUnimplementedDonatesServer() {}

// UnsafeDonatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonatesServer will
// result in compilation errors.
type UnsafeDonatesServer interface {
	mustEmbedUnimplementedDonatesServer()
}

func RegisterDonatesServer(s grpc.ServiceRegistrar, srv DonatesServer) {
	s.RegisterService(&Donates_ServiceDesc, srv)
}

func _Donates_SendDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Donate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonatesServer).SendDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donates.Donates/SendDonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonatesServer).SendDonate(ctx, req.(*Donate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donates_GetDonatesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonatesServer).GetDonatesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donates.Donates/GetDonatesByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonatesServer).GetDonatesByUserID(ctx, req.(*protobuf.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donates_GetDonateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonatesServer).GetDonateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donates.Donates/GetDonateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonatesServer).GetDonateByID(ctx, req.(*DonateID))
	}
	return interceptor(ctx, in, info, handler)
}

// Donates_ServiceDesc is the grpc.ServiceDesc for Donates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Donates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donates.Donates",
	HandlerType: (*DonatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDonate",
			Handler:    _Donates_SendDonate_Handler,
		},
		{
			MethodName: "GetDonatesByUserID",
			Handler:    _Donates_GetDonatesByUserID_Handler,
		},
		{
			MethodName: "GetDonateByID",
			Handler:    _Donates_GetDonateByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/donates/protobuf/donates.proto",
}
