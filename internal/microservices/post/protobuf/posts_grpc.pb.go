// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: internal/microservices/post/protobuf/posts.proto

package protobuf

import (
	context "context"
	protobuf "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/users/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsClient is the client API for Posts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsClient interface {
	GetAllByUserID(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*PostArray, error)
	GetPostByID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Post, error)
	Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteByID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPostsBySubscriptions(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*PostArray, error)
	GetLikeByUserAndPostID(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*Like, error)
	GetAllLikesByPostID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Likes, error)
	CreateLike(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLikeByID(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTag(ctx context.Context, in *TagName, opts ...grpc.CallOption) (*TagID, error)
	GetTagById(ctx context.Context, in *TagID, opts ...grpc.CallOption) (*Tag, error)
	GetTagByName(ctx context.Context, in *TagName, opts ...grpc.CallOption) (*Tag, error)
	CreateDepTag(ctx context.Context, in *TagDep, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTagDepsByPostId(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*TagDeps, error)
	DeleteDepTag(ctx context.Context, in *TagDep, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentPairIdDate, error)
	GetCommentByID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Comment, error)
	GetCommentsByPostID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CommentArray, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCommentByID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type postsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsClient(cc grpc.ClientConnInterface) PostsClient {
	return &postsClient{cc}
}

func (c *postsClient) GetAllByUserID(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetAllByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPostByID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetPostByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts.Posts/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeleteByID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPostsBySubscriptions(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetPostsBySubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetLikeByUserAndPostID(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetLikeByUserAndPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetAllLikesByPostID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Likes, error) {
	out := new(Likes)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetAllLikesByPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) CreateLike(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeleteLikeByID(ctx context.Context, in *PostUserIDs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/DeleteLikeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) CreateTag(ctx context.Context, in *TagName, opts ...grpc.CallOption) (*TagID, error) {
	out := new(TagID)
	err := c.cc.Invoke(ctx, "/posts.Posts/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetTagById(ctx context.Context, in *TagID, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetTagById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetTagByName(ctx context.Context, in *TagName, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetTagByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) CreateDepTag(ctx context.Context, in *TagDep, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/CreateDepTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetTagDepsByPostId(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*TagDeps, error) {
	out := new(TagDeps)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetTagDepsByPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeleteDepTag(ctx context.Context, in *TagDep, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/DeleteDepTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentPairIdDate, error) {
	out := new(CommentPairIdDate)
	err := c.cc.Invoke(ctx, "/posts.Posts/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetCommentByID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetCommentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetCommentsByPostID(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CommentArray, error) {
	out := new(CommentArray)
	err := c.cc.Invoke(ctx, "/posts.Posts/GetCommentsByPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeleteCommentByID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts.Posts/DeleteCommentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServer is the server API for Posts service.
// All implementations must embed UnimplementedPostsServer
// for forward compatibility
type PostsServer interface {
	GetAllByUserID(context.Context, *protobuf.UserID) (*PostArray, error)
	GetPostByID(context.Context, *PostID) (*Post, error)
	Create(context.Context, *Post) (*Post, error)
	Update(context.Context, *Post) (*emptypb.Empty, error)
	DeleteByID(context.Context, *PostID) (*emptypb.Empty, error)
	GetPostsBySubscriptions(context.Context, *protobuf.UserID) (*PostArray, error)
	GetLikeByUserAndPostID(context.Context, *PostUserIDs) (*Like, error)
	GetAllLikesByPostID(context.Context, *PostID) (*Likes, error)
	CreateLike(context.Context, *PostUserIDs) (*emptypb.Empty, error)
	DeleteLikeByID(context.Context, *PostUserIDs) (*emptypb.Empty, error)
	CreateTag(context.Context, *TagName) (*TagID, error)
	GetTagById(context.Context, *TagID) (*Tag, error)
	GetTagByName(context.Context, *TagName) (*Tag, error)
	CreateDepTag(context.Context, *TagDep) (*emptypb.Empty, error)
	GetTagDepsByPostId(context.Context, *PostID) (*TagDeps, error)
	DeleteDepTag(context.Context, *TagDep) (*emptypb.Empty, error)
	CreateComment(context.Context, *Comment) (*CommentPairIdDate, error)
	GetCommentByID(context.Context, *CommentID) (*Comment, error)
	GetCommentsByPostID(context.Context, *PostID) (*CommentArray, error)
	UpdateComment(context.Context, *Comment) (*emptypb.Empty, error)
	DeleteCommentByID(context.Context, *CommentID) (*emptypb.Empty, error)
	mustEmbedUnimplementedPostsServer()
}

// UnimplementedPostsServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServer struct {
}

func (UnimplementedPostsServer) GetAllByUserID(context.Context, *protobuf.UserID) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserID not implemented")
}
func (UnimplementedPostsServer) GetPostByID(context.Context, *PostID) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedPostsServer) Create(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostsServer) Update(context.Context, *Post) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostsServer) DeleteByID(context.Context, *PostID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedPostsServer) GetPostsBySubscriptions(context.Context, *protobuf.UserID) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsBySubscriptions not implemented")
}
func (UnimplementedPostsServer) GetLikeByUserAndPostID(context.Context, *PostUserIDs) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeByUserAndPostID not implemented")
}
func (UnimplementedPostsServer) GetAllLikesByPostID(context.Context, *PostID) (*Likes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLikesByPostID not implemented")
}
func (UnimplementedPostsServer) CreateLike(context.Context, *PostUserIDs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedPostsServer) DeleteLikeByID(context.Context, *PostUserIDs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeByID not implemented")
}
func (UnimplementedPostsServer) CreateTag(context.Context, *TagName) (*TagID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedPostsServer) GetTagById(context.Context, *TagID) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedPostsServer) GetTagByName(context.Context, *TagName) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagByName not implemented")
}
func (UnimplementedPostsServer) CreateDepTag(context.Context, *TagDep) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepTag not implemented")
}
func (UnimplementedPostsServer) GetTagDepsByPostId(context.Context, *PostID) (*TagDeps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagDepsByPostId not implemented")
}
func (UnimplementedPostsServer) DeleteDepTag(context.Context, *TagDep) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepTag not implemented")
}
func (UnimplementedPostsServer) CreateComment(context.Context, *Comment) (*CommentPairIdDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostsServer) GetCommentByID(context.Context, *CommentID) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByID not implemented")
}
func (UnimplementedPostsServer) GetCommentsByPostID(context.Context, *PostID) (*CommentArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByPostID not implemented")
}
func (UnimplementedPostsServer) UpdateComment(context.Context, *Comment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedPostsServer) DeleteCommentByID(context.Context, *CommentID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentByID not implemented")
}
func (UnimplementedPostsServer) mustEmbedUnimplementedPostsServer() {}

// UnsafePostsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServer will
// result in compilation errors.
type UnsafePostsServer interface {
	mustEmbedUnimplementedPostsServer()
}

func RegisterPostsServer(s grpc.ServiceRegistrar, srv PostsServer) {
	s.RegisterService(&Posts_ServiceDesc, srv)
}

func _Posts_GetAllByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetAllByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetAllByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetAllByUserID(ctx, req.(*protobuf.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetPostByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPostByID(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).Create(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).Update(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeleteByID(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPostsBySubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPostsBySubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetPostsBySubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPostsBySubscriptions(ctx, req.(*protobuf.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetLikeByUserAndPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetLikeByUserAndPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetLikeByUserAndPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetLikeByUserAndPostID(ctx, req.(*PostUserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetAllLikesByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetAllLikesByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetAllLikesByPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetAllLikesByPostID(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).CreateLike(ctx, req.(*PostUserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeleteLikeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeleteLikeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/DeleteLikeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeleteLikeByID(ctx, req.(*PostUserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).CreateTag(ctx, req.(*TagName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetTagById(ctx, req.(*TagID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetTagByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetTagByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetTagByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetTagByName(ctx, req.(*TagName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_CreateDepTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).CreateDepTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/CreateDepTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).CreateDepTag(ctx, req.(*TagDep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetTagDepsByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetTagDepsByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetTagDepsByPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetTagDepsByPostId(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeleteDepTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeleteDepTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/DeleteDepTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeleteDepTag(ctx, req.(*TagDep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetCommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetCommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetCommentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetCommentByID(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetCommentsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetCommentsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/GetCommentsByPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetCommentsByPostID(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeleteCommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeleteCommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.Posts/DeleteCommentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeleteCommentByID(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

// Posts_ServiceDesc is the grpc.ServiceDesc for Posts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Posts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts.Posts",
	HandlerType: (*PostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllByUserID",
			Handler:    _Posts_GetAllByUserID_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _Posts_GetPostByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Posts_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Posts_Update_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _Posts_DeleteByID_Handler,
		},
		{
			MethodName: "GetPostsBySubscriptions",
			Handler:    _Posts_GetPostsBySubscriptions_Handler,
		},
		{
			MethodName: "GetLikeByUserAndPostID",
			Handler:    _Posts_GetLikeByUserAndPostID_Handler,
		},
		{
			MethodName: "GetAllLikesByPostID",
			Handler:    _Posts_GetAllLikesByPostID_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _Posts_CreateLike_Handler,
		},
		{
			MethodName: "DeleteLikeByID",
			Handler:    _Posts_DeleteLikeByID_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Posts_CreateTag_Handler,
		},
		{
			MethodName: "GetTagById",
			Handler:    _Posts_GetTagById_Handler,
		},
		{
			MethodName: "GetTagByName",
			Handler:    _Posts_GetTagByName_Handler,
		},
		{
			MethodName: "CreateDepTag",
			Handler:    _Posts_CreateDepTag_Handler,
		},
		{
			MethodName: "GetTagDepsByPostId",
			Handler:    _Posts_GetTagDepsByPostId_Handler,
		},
		{
			MethodName: "DeleteDepTag",
			Handler:    _Posts_DeleteDepTag_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Posts_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentByID",
			Handler:    _Posts_GetCommentByID_Handler,
		},
		{
			MethodName: "GetCommentsByPostID",
			Handler:    _Posts_GetCommentsByPostID_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Posts_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteCommentByID",
			Handler:    _Posts_DeleteCommentByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/post/protobuf/posts.proto",
}
