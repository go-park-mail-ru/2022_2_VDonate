// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: internal/microservices/subscribers/protobuf/subscribers.proto

package protobuf

import (
	context "context"
	protobuf "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/users/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscribersClient is the client API for Subscribers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribersClient interface {
	GetSubscribers(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*protobuf.UserIDs, error)
	Subscribe(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unsubscribe(ctx context.Context, in *protobuf.UserAuthorPair, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangePaymentStatus(ctx context.Context, in *StatusAndID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subscribersClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribersClient(cc grpc.ClientConnInterface) SubscribersClient {
	return &subscribersClient{cc}
}

func (c *subscribersClient) GetSubscribers(ctx context.Context, in *protobuf.UserID, opts ...grpc.CallOption) (*protobuf.UserIDs, error) {
	out := new(protobuf.UserIDs)
	err := c.cc.Invoke(ctx, "/subscribers.Subscribers/GetSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersClient) Subscribe(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/subscribers.Subscribers/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersClient) Unsubscribe(ctx context.Context, in *protobuf.UserAuthorPair, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/subscribers.Subscribers/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersClient) ChangePaymentStatus(ctx context.Context, in *StatusAndID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/subscribers.Subscribers/ChangePaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribersServer is the server API for Subscribers service.
// All implementations must embed UnimplementedSubscribersServer
// for forward compatibility
type SubscribersServer interface {
	GetSubscribers(context.Context, *protobuf.UserID) (*protobuf.UserIDs, error)
	Subscribe(context.Context, *Payment) (*emptypb.Empty, error)
	Unsubscribe(context.Context, *protobuf.UserAuthorPair) (*emptypb.Empty, error)
	ChangePaymentStatus(context.Context, *StatusAndID) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubscribersServer()
}

// UnimplementedSubscribersServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribersServer struct {
}

func (UnimplementedSubscribersServer) GetSubscribers(context.Context, *protobuf.UserID) (*protobuf.UserIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribers not implemented")
}
func (UnimplementedSubscribersServer) Subscribe(context.Context, *Payment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscribersServer) Unsubscribe(context.Context, *protobuf.UserAuthorPair) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedSubscribersServer) ChangePaymentStatus(context.Context, *StatusAndID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePaymentStatus not implemented")
}
func (UnimplementedSubscribersServer) mustEmbedUnimplementedSubscribersServer() {}

// UnsafeSubscribersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribersServer will
// result in compilation errors.
type UnsafeSubscribersServer interface {
	mustEmbedUnimplementedSubscribersServer()
}

func RegisterSubscribersServer(s grpc.ServiceRegistrar, srv SubscribersServer) {
	s.RegisterService(&Subscribers_ServiceDesc, srv)
}

func _Subscribers_GetSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).GetSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribers.Subscribers/GetSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).GetSubscribers(ctx, req.(*protobuf.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscribers_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribers.Subscribers/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).Subscribe(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscribers_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.UserAuthorPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribers.Subscribers/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).Unsubscribe(ctx, req.(*protobuf.UserAuthorPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscribers_ChangePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusAndID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).ChangePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribers.Subscribers/ChangePaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).ChangePaymentStatus(ctx, req.(*StatusAndID))
	}
	return interceptor(ctx, in, info, handler)
}

// Subscribers_ServiceDesc is the grpc.ServiceDesc for Subscribers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subscribers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscribers.Subscribers",
	HandlerType: (*SubscribersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscribers",
			Handler:    _Subscribers_GetSubscribers_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Subscribers_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Subscribers_Unsubscribe_Handler,
		},
		{
			MethodName: "ChangePaymentStatus",
			Handler:    _Subscribers_ChangePaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/subscribers/protobuf/subscribers.proto",
}
