// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/posts.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPostsMicroservice is a mock of PostsMicroservice interface.
type MockPostsMicroservice struct {
	ctrl     *gomock.Controller
	recorder *MockPostsMicroserviceMockRecorder
}

// MockPostsMicroserviceMockRecorder is the mock recorder for MockPostsMicroservice.
type MockPostsMicroserviceMockRecorder struct {
	mock *MockPostsMicroservice
}

// NewMockPostsMicroservice creates a new mock instance.
func NewMockPostsMicroservice(ctrl *gomock.Controller) *MockPostsMicroservice {
	mock := &MockPostsMicroservice{ctrl: ctrl}
	mock.recorder = &MockPostsMicroserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsMicroservice) EXPECT() *MockPostsMicroserviceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostsMicroservice) Create(post models.Post) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostsMicroserviceMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostsMicroservice)(nil).Create), post)
}

// CreateComment mocks base method.
func (m *MockPostsMicroservice) CreateComment(comment models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostsMicroserviceMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostsMicroservice)(nil).CreateComment), comment)
}

// CreateDepTag mocks base method.
func (m *MockPostsMicroservice) CreateDepTag(postID, tagID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepTag", postID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDepTag indicates an expected call of CreateDepTag.
func (mr *MockPostsMicroserviceMockRecorder) CreateDepTag(postID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepTag", reflect.TypeOf((*MockPostsMicroservice)(nil).CreateDepTag), postID, tagID)
}

// CreateLike mocks base method.
func (m *MockPostsMicroservice) CreateLike(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockPostsMicroserviceMockRecorder) CreateLike(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockPostsMicroservice)(nil).CreateLike), userID, postID)
}

// CreateTag mocks base method.
func (m *MockPostsMicroservice) CreateTag(tagName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tagName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockPostsMicroserviceMockRecorder) CreateTag(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockPostsMicroservice)(nil).CreateTag), tagName)
}

// DeleteByID mocks base method.
func (m *MockPostsMicroservice) DeleteByID(postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPostsMicroserviceMockRecorder) DeleteByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPostsMicroservice)(nil).DeleteByID), postID)
}

// DeleteCommentByID mocks base method.
func (m *MockPostsMicroservice) DeleteCommentByID(commentID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByID", commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByID indicates an expected call of DeleteCommentByID.
func (mr *MockPostsMicroserviceMockRecorder) DeleteCommentByID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByID", reflect.TypeOf((*MockPostsMicroservice)(nil).DeleteCommentByID), commentID)
}

// DeleteDepTag mocks base method.
func (m *MockPostsMicroservice) DeleteDepTag(tagDep models.TagDep) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepTag", tagDep)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDepTag indicates an expected call of DeleteDepTag.
func (mr *MockPostsMicroserviceMockRecorder) DeleteDepTag(tagDep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepTag", reflect.TypeOf((*MockPostsMicroservice)(nil).DeleteDepTag), tagDep)
}

// DeleteLikeByID mocks base method.
func (m *MockPostsMicroservice) DeleteLikeByID(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeByID", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeByID indicates an expected call of DeleteLikeByID.
func (mr *MockPostsMicroserviceMockRecorder) DeleteLikeByID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeByID", reflect.TypeOf((*MockPostsMicroservice)(nil).DeleteLikeByID), userID, postID)
}

// GetAllByUserID mocks base method.
func (m *MockPostsMicroservice) GetAllByUserID(authorID uint64) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", authorID)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockPostsMicroserviceMockRecorder) GetAllByUserID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetAllByUserID), authorID)
}

// GetAllLikesByPostID mocks base method.
func (m *MockPostsMicroservice) GetAllLikesByPostID(postID uint64) ([]models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLikesByPostID", postID)
	ret0, _ := ret[0].([]models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLikesByPostID indicates an expected call of GetAllLikesByPostID.
func (mr *MockPostsMicroserviceMockRecorder) GetAllLikesByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLikesByPostID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetAllLikesByPostID), postID)
}

// GetCommentByID mocks base method.
func (m *MockPostsMicroservice) GetCommentByID(commentID uint64) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", commentID)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockPostsMicroserviceMockRecorder) GetCommentByID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetCommentByID), commentID)
}

// GetCommentsByPostID mocks base method.
func (m *MockPostsMicroservice) GetCommentsByPostID(postID uint64) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", postID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockPostsMicroserviceMockRecorder) GetCommentsByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetCommentsByPostID), postID)
}

// GetLikeByUserAndPostID mocks base method.
func (m *MockPostsMicroservice) GetLikeByUserAndPostID(userID, postID uint64) (models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByUserAndPostID", userID, postID)
	ret0, _ := ret[0].(models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByUserAndPostID indicates an expected call of GetLikeByUserAndPostID.
func (mr *MockPostsMicroserviceMockRecorder) GetLikeByUserAndPostID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByUserAndPostID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetLikeByUserAndPostID), userID, postID)
}

// GetPostByID mocks base method.
func (m *MockPostsMicroservice) GetPostByID(postID uint64) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostsMicroserviceMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostsMicroservice)(nil).GetPostByID), postID)
}

// GetPostsBySubscriptions mocks base method.
func (m *MockPostsMicroservice) GetPostsBySubscriptions(userID uint64) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsBySubscriptions", userID)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsBySubscriptions indicates an expected call of GetPostsBySubscriptions.
func (mr *MockPostsMicroserviceMockRecorder) GetPostsBySubscriptions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsBySubscriptions", reflect.TypeOf((*MockPostsMicroservice)(nil).GetPostsBySubscriptions), userID)
}

// GetTagById mocks base method.
func (m *MockPostsMicroservice) GetTagById(tagID uint64) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", tagID)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockPostsMicroserviceMockRecorder) GetTagById(tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockPostsMicroservice)(nil).GetTagById), tagID)
}

// GetTagByName mocks base method.
func (m *MockPostsMicroservice) GetTagByName(tagName string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", tagName)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockPostsMicroserviceMockRecorder) GetTagByName(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockPostsMicroservice)(nil).GetTagByName), tagName)
}

// GetTagDepsByPostId mocks base method.
func (m *MockPostsMicroservice) GetTagDepsByPostId(postID uint64) ([]models.TagDep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagDepsByPostId", postID)
	ret0, _ := ret[0].([]models.TagDep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagDepsByPostId indicates an expected call of GetTagDepsByPostId.
func (mr *MockPostsMicroserviceMockRecorder) GetTagDepsByPostId(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagDepsByPostId", reflect.TypeOf((*MockPostsMicroservice)(nil).GetTagDepsByPostId), postID)
}

// Update mocks base method.
func (m *MockPostsMicroservice) Update(post models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPostsMicroserviceMockRecorder) Update(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostsMicroservice)(nil).Update), post)
}

// UpdateComment mocks base method.
func (m *MockPostsMicroservice) UpdateComment(comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockPostsMicroserviceMockRecorder) UpdateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockPostsMicroservice)(nil).UpdateComment), comment)
}

// MockPostsUseCase is a mock of PostsUseCase interface.
type MockPostsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPostsUseCaseMockRecorder
}

// MockPostsUseCaseMockRecorder is the mock recorder for MockPostsUseCase.
type MockPostsUseCaseMockRecorder struct {
	mock *MockPostsUseCase
}

// NewMockPostsUseCase creates a new mock instance.
func NewMockPostsUseCase(ctrl *gomock.Controller) *MockPostsUseCase {
	mock := &MockPostsUseCase{ctrl: ctrl}
	mock.recorder = &MockPostsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsUseCase) EXPECT() *MockPostsUseCaseMockRecorder {
	return m.recorder
}

// ConvertTagsToStrSlice mocks base method.
func (m *MockPostsUseCase) ConvertTagsToStrSlice(tags []models.Tag) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertTagsToStrSlice", tags)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ConvertTagsToStrSlice indicates an expected call of ConvertTagsToStrSlice.
func (mr *MockPostsUseCaseMockRecorder) ConvertTagsToStrSlice(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertTagsToStrSlice", reflect.TypeOf((*MockPostsUseCase)(nil).ConvertTagsToStrSlice), tags)
}

// Create mocks base method.
func (m *MockPostsUseCase) Create(post models.Post, userID uint64) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post, userID)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostsUseCaseMockRecorder) Create(post, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostsUseCase)(nil).Create), post, userID)
}

// CreateComment mocks base method.
func (m *MockPostsUseCase) CreateComment(comment models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostsUseCaseMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostsUseCase)(nil).CreateComment), comment)
}

// CreateTags mocks base method.
func (m *MockPostsUseCase) CreateTags(tagNames []string, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", tagNames, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockPostsUseCaseMockRecorder) CreateTags(tagNames, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockPostsUseCase)(nil).CreateTags), tagNames, postID)
}

// DeleteByID mocks base method.
func (m *MockPostsUseCase) DeleteByID(postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPostsUseCaseMockRecorder) DeleteByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPostsUseCase)(nil).DeleteByID), postID)
}

// DeleteComment mocks base method.
func (m *MockPostsUseCase) DeleteComment(commentID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostsUseCaseMockRecorder) DeleteComment(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsUseCase)(nil).DeleteComment), commentID)
}

// DeleteTagDeps mocks base method.
func (m *MockPostsUseCase) DeleteTagDeps(postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagDeps", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagDeps indicates an expected call of DeleteTagDeps.
func (mr *MockPostsUseCaseMockRecorder) DeleteTagDeps(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagDeps", reflect.TypeOf((*MockPostsUseCase)(nil).DeleteTagDeps), postID)
}

// GetCommentByID mocks base method.
func (m *MockPostsUseCase) GetCommentByID(commentID uint64) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", commentID)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockPostsUseCaseMockRecorder) GetCommentByID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockPostsUseCase)(nil).GetCommentByID), commentID)
}

// GetCommentsByPostID mocks base method.
func (m *MockPostsUseCase) GetCommentsByPostID(postID uint64) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", postID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockPostsUseCaseMockRecorder) GetCommentsByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockPostsUseCase)(nil).GetCommentsByPostID), postID)
}

// GetLikeByUserAndPostID mocks base method.
func (m *MockPostsUseCase) GetLikeByUserAndPostID(userID, postID uint64) (models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByUserAndPostID", userID, postID)
	ret0, _ := ret[0].(models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByUserAndPostID indicates an expected call of GetLikeByUserAndPostID.
func (mr *MockPostsUseCaseMockRecorder) GetLikeByUserAndPostID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByUserAndPostID", reflect.TypeOf((*MockPostsUseCase)(nil).GetLikeByUserAndPostID), userID, postID)
}

// GetLikesByPostID mocks base method.
func (m *MockPostsUseCase) GetLikesByPostID(postID uint64) ([]models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesByPostID", postID)
	ret0, _ := ret[0].([]models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesByPostID indicates an expected call of GetLikesByPostID.
func (mr *MockPostsUseCaseMockRecorder) GetLikesByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesByPostID", reflect.TypeOf((*MockPostsUseCase)(nil).GetLikesByPostID), postID)
}

// GetLikesNum mocks base method.
func (m *MockPostsUseCase) GetLikesNum(postID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesNum", postID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesNum indicates an expected call of GetLikesNum.
func (mr *MockPostsUseCaseMockRecorder) GetLikesNum(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesNum", reflect.TypeOf((*MockPostsUseCase)(nil).GetLikesNum), postID)
}

// GetPostByID mocks base method.
func (m *MockPostsUseCase) GetPostByID(postID, userID uint64) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID, userID)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostsUseCaseMockRecorder) GetPostByID(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostsUseCase)(nil).GetPostByID), postID, userID)
}

// GetPostsByFilter mocks base method.
func (m *MockPostsUseCase) GetPostsByFilter(userID, authorID uint64) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByFilter", userID, authorID)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByFilter indicates an expected call of GetPostsByFilter.
func (mr *MockPostsUseCaseMockRecorder) GetPostsByFilter(userID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByFilter", reflect.TypeOf((*MockPostsUseCase)(nil).GetPostsByFilter), userID, authorID)
}

// GetTagsByPostID mocks base method.
func (m *MockPostsUseCase) GetTagsByPostID(postID uint64) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByPostID", postID)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByPostID indicates an expected call of GetTagsByPostID.
func (mr *MockPostsUseCaseMockRecorder) GetTagsByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByPostID", reflect.TypeOf((*MockPostsUseCase)(nil).GetTagsByPostID), postID)
}

// IsPostLiked mocks base method.
func (m *MockPostsUseCase) IsPostLiked(userID, postID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPostLiked", userID, postID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPostLiked indicates an expected call of IsPostLiked.
func (mr *MockPostsUseCaseMockRecorder) IsPostLiked(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPostLiked", reflect.TypeOf((*MockPostsUseCase)(nil).IsPostLiked), userID, postID)
}

// LikePost mocks base method.
func (m *MockPostsUseCase) LikePost(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostsUseCaseMockRecorder) LikePost(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostsUseCase)(nil).LikePost), userID, postID)
}

// UnlikePost mocks base method.
func (m *MockPostsUseCase) UnlikePost(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostsUseCaseMockRecorder) UnlikePost(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostsUseCase)(nil).UnlikePost), userID, postID)
}

// Update mocks base method.
func (m *MockPostsUseCase) Update(post models.Post, postID uint64) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", post, postID)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostsUseCaseMockRecorder) Update(post, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostsUseCase)(nil).Update), post, postID)
}

// UpdateComment mocks base method.
func (m *MockPostsUseCase) UpdateComment(commentID uint64, commentMsg string) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", commentID, commentMsg)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockPostsUseCaseMockRecorder) UpdateComment(commentID, commentMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockPostsUseCase)(nil).UpdateComment), commentID, commentMsg)
}

// UpdateTags mocks base method.
func (m *MockPostsUseCase) UpdateTags(tagNames []string, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", tagNames, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTags indicates an expected call of UpdateTags.
func (mr *MockPostsUseCaseMockRecorder) UpdateTags(tagNames, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockPostsUseCase)(nil).UpdateTags), tagNames, postID)
}
