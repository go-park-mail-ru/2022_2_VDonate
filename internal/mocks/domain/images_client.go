// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/images/protobuf/images_grpc.pb.go

// Package mock_protobuf is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	protobuf "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/images/protobuf"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockImagesClient is a mock of ImagesClient interface.
type MockImagesClient struct {
	ctrl     *gomock.Controller
	recorder *MockImagesClientMockRecorder
}

// MockImagesClientMockRecorder is the mock recorder for MockImagesClient.
type MockImagesClientMockRecorder struct {
	mock *MockImagesClient
}

// NewMockImagesClient creates a new mock instance.
func NewMockImagesClient(ctrl *gomock.Controller) *MockImagesClient {
	mock := &MockImagesClient{ctrl: ctrl}
	mock.recorder = &MockImagesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesClient) EXPECT() *MockImagesClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImagesClient) Create(ctx context.Context, in *protobuf.Image, opts ...grpc.CallOption) (*protobuf.Filename, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*protobuf.Filename)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImagesClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImagesClient)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockImagesClient) Get(ctx context.Context, in *protobuf.Filename, opts ...grpc.CallOption) (*protobuf.URL, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*protobuf.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImagesClient)(nil).Get), varargs...)
}

// MockImagesServer is a mock of ImagesServer interface.
type MockImagesServer struct {
	ctrl     *gomock.Controller
	recorder *MockImagesServerMockRecorder
}

// MockImagesServerMockRecorder is the mock recorder for MockImagesServer.
type MockImagesServerMockRecorder struct {
	mock *MockImagesServer
}

// NewMockImagesServer creates a new mock instance.
func NewMockImagesServer(ctrl *gomock.Controller) *MockImagesServer {
	mock := &MockImagesServer{ctrl: ctrl}
	mock.recorder = &MockImagesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesServer) EXPECT() *MockImagesServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImagesServer) Create(arg0 context.Context, arg1 *protobuf.Image) (*protobuf.Filename, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.Filename)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImagesServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImagesServer)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockImagesServer) Get(arg0 context.Context, arg1 *protobuf.Filename) (*protobuf.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImagesServer)(nil).Get), arg0, arg1)
}

// mustEmbedUnimplementedImagesServer mocks base method.
func (m *MockImagesServer) mustEmbedUnimplementedImagesServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImagesServer")
}

// mustEmbedUnimplementedImagesServer indicates an expected call of mustEmbedUnimplementedImagesServer.
func (mr *MockImagesServerMockRecorder) mustEmbedUnimplementedImagesServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImagesServer", reflect.TypeOf((*MockImagesServer)(nil).mustEmbedUnimplementedImagesServer))
}

// MockUnsafeImagesServer is a mock of UnsafeImagesServer interface.
type MockUnsafeImagesServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeImagesServerMockRecorder
}

// MockUnsafeImagesServerMockRecorder is the mock recorder for MockUnsafeImagesServer.
type MockUnsafeImagesServerMockRecorder struct {
	mock *MockUnsafeImagesServer
}

// NewMockUnsafeImagesServer creates a new mock instance.
func NewMockUnsafeImagesServer(ctrl *gomock.Controller) *MockUnsafeImagesServer {
	mock := &MockUnsafeImagesServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeImagesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeImagesServer) EXPECT() *MockUnsafeImagesServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedImagesServer mocks base method.
func (m *MockUnsafeImagesServer) mustEmbedUnimplementedImagesServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImagesServer")
}

// mustEmbedUnimplementedImagesServer indicates an expected call of mustEmbedUnimplementedImagesServer.
func (mr *MockUnsafeImagesServerMockRecorder) mustEmbedUnimplementedImagesServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImagesServer", reflect.TypeOf((*MockUnsafeImagesServer)(nil).mustEmbedUnimplementedImagesServer))
}
