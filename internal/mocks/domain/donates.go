// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/donates.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDonatesMicroservice is a mock of DonatesMicroservice interface.
type MockDonatesMicroservice struct {
	ctrl     *gomock.Controller
	recorder *MockDonatesMicroserviceMockRecorder
}

// MockDonatesMicroserviceMockRecorder is the mock recorder for MockDonatesMicroservice.
type MockDonatesMicroserviceMockRecorder struct {
	mock *MockDonatesMicroservice
}

// NewMockDonatesMicroservice creates a new mock instance.
func NewMockDonatesMicroservice(ctrl *gomock.Controller) *MockDonatesMicroservice {
	mock := &MockDonatesMicroservice{ctrl: ctrl}
	mock.recorder = &MockDonatesMicroserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDonatesMicroservice) EXPECT() *MockDonatesMicroserviceMockRecorder {
	return m.recorder
}

// GetDonateByID mocks base method.
func (m *MockDonatesMicroservice) GetDonateByID(donateID uint64) (models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDonateByID", donateID)
	ret0, _ := ret[0].(models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDonateByID indicates an expected call of GetDonateByID.
func (mr *MockDonatesMicroserviceMockRecorder) GetDonateByID(donateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDonateByID", reflect.TypeOf((*MockDonatesMicroservice)(nil).GetDonateByID), donateID)
}

// GetDonatesByUserID mocks base method.
func (m *MockDonatesMicroservice) GetDonatesByUserID(userID uint64) ([]models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDonatesByUserID", userID)
	ret0, _ := ret[0].([]models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDonatesByUserID indicates an expected call of GetDonatesByUserID.
func (mr *MockDonatesMicroserviceMockRecorder) GetDonatesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDonatesByUserID", reflect.TypeOf((*MockDonatesMicroservice)(nil).GetDonatesByUserID), userID)
}

// SendDonate mocks base method.
func (m *MockDonatesMicroservice) SendDonate(donate models.Donate) (models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDonate", donate)
	ret0, _ := ret[0].(models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDonate indicates an expected call of SendDonate.
func (mr *MockDonatesMicroserviceMockRecorder) SendDonate(donate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDonate", reflect.TypeOf((*MockDonatesMicroservice)(nil).SendDonate), donate)
}

// MockDonatesUseCase is a mock of DonatesUseCase interface.
type MockDonatesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDonatesUseCaseMockRecorder
}

// MockDonatesUseCaseMockRecorder is the mock recorder for MockDonatesUseCase.
type MockDonatesUseCaseMockRecorder struct {
	mock *MockDonatesUseCase
}

// NewMockDonatesUseCase creates a new mock instance.
func NewMockDonatesUseCase(ctrl *gomock.Controller) *MockDonatesUseCase {
	mock := &MockDonatesUseCase{ctrl: ctrl}
	mock.recorder = &MockDonatesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDonatesUseCase) EXPECT() *MockDonatesUseCaseMockRecorder {
	return m.recorder
}

// GetDonateByID mocks base method.
func (m *MockDonatesUseCase) GetDonateByID(ID uint64) (models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDonateByID", ID)
	ret0, _ := ret[0].(models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDonateByID indicates an expected call of GetDonateByID.
func (mr *MockDonatesUseCaseMockRecorder) GetDonateByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDonateByID", reflect.TypeOf((*MockDonatesUseCase)(nil).GetDonateByID), ID)
}

// GetDonatesByUserID mocks base method.
func (m *MockDonatesUseCase) GetDonatesByUserID(userID uint64) ([]models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDonatesByUserID", userID)
	ret0, _ := ret[0].([]models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDonatesByUserID indicates an expected call of GetDonatesByUserID.
func (mr *MockDonatesUseCaseMockRecorder) GetDonatesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDonatesByUserID", reflect.TypeOf((*MockDonatesUseCase)(nil).GetDonatesByUserID), userID)
}

// SendDonate mocks base method.
func (m *MockDonatesUseCase) SendDonate(userID, authorID, price uint64) (models.Donate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDonate", userID, authorID, price)
	ret0, _ := ret[0].(models.Donate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDonate indicates an expected call of SendDonate.
func (mr *MockDonatesUseCaseMockRecorder) SendDonate(userID, authorID, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDonate", reflect.TypeOf((*MockDonatesUseCase)(nil).SendDonate), userID, authorID, price)
}
