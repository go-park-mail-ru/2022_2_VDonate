// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/subscribers.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscribersUseCase is a mock of SubscribersUseCase interface.
type MockSubscribersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersUseCaseMockRecorder
}

// MockSubscribersUseCaseMockRecorder is the mock recorder for MockSubscribersUseCase.
type MockSubscribersUseCaseMockRecorder struct {
	mock *MockSubscribersUseCase
}

// NewMockSubscribersUseCase creates a new mock instance.
func NewMockSubscribersUseCase(ctrl *gomock.Controller) *MockSubscribersUseCase {
	mock := &MockSubscribersUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscribersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersUseCase) EXPECT() *MockSubscribersUseCaseMockRecorder {
	return m.recorder
}

// GetSubscribers mocks base method.
func (m *MockSubscribersUseCase) GetSubscribers(authorID uint64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", authorID)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockSubscribersUseCaseMockRecorder) GetSubscribers(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockSubscribersUseCase)(nil).GetSubscribers), authorID)
}

// IsSubscriber mocks base method.
func (m *MockSubscribersUseCase) IsSubscriber(userID, authorID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscriber", userID, authorID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubscriber indicates an expected call of IsSubscriber.
func (mr *MockSubscribersUseCaseMockRecorder) IsSubscriber(userID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscriber", reflect.TypeOf((*MockSubscribersUseCase)(nil).IsSubscriber), userID, authorID)
}

// Subscribe mocks base method.
func (m *MockSubscribersUseCase) Subscribe(subscription models.Subscription, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subscription, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribersUseCaseMockRecorder) Subscribe(subscription, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribersUseCase)(nil).Subscribe), subscription, userID)
}

// Unsubscribe mocks base method.
func (m *MockSubscribersUseCase) Unsubscribe(userID, authorID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", userID, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscribersUseCaseMockRecorder) Unsubscribe(userID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscribersUseCase)(nil).Unsubscribe), userID, authorID)
}

// MockSubscribersMicroservice is a mock of SubscribersMicroservice interface.
type MockSubscribersMicroservice struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersMicroserviceMockRecorder
}

// MockSubscribersMicroserviceMockRecorder is the mock recorder for MockSubscribersMicroservice.
type MockSubscribersMicroserviceMockRecorder struct {
	mock *MockSubscribersMicroservice
}

// NewMockSubscribersMicroservice creates a new mock instance.
func NewMockSubscribersMicroservice(ctrl *gomock.Controller) *MockSubscribersMicroservice {
	mock := &MockSubscribersMicroservice{ctrl: ctrl}
	mock.recorder = &MockSubscribersMicroserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersMicroservice) EXPECT() *MockSubscribersMicroserviceMockRecorder {
	return m.recorder
}

// GetSubscribers mocks base method.
func (m *MockSubscribersMicroservice) GetSubscribers(userID uint64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", userID)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockSubscribersMicroserviceMockRecorder) GetSubscribers(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockSubscribersMicroservice)(nil).GetSubscribers), userID)
}

// Subscribe mocks base method.
func (m *MockSubscribersMicroservice) Subscribe(subscriber models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subscriber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribersMicroserviceMockRecorder) Subscribe(subscriber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribersMicroservice)(nil).Subscribe), subscriber)
}

// Unsubscribe mocks base method.
func (m *MockSubscribersMicroservice) Unsubscribe(subscriber models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", subscriber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscribersMicroserviceMockRecorder) Unsubscribe(subscriber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscribersMicroservice)(nil).Unsubscribe), subscriber)
}
