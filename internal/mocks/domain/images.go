// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/images.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	multipart "mime/multipart"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageUseCase is a mock of ImageUseCase interface.
type MockImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockImageUseCaseMockRecorder
}

// MockImageUseCaseMockRecorder is the mock recorder for MockImageUseCase.
type MockImageUseCaseMockRecorder struct {
	mock *MockImageUseCase
}

// NewMockImageUseCase creates a new mock instance.
func NewMockImageUseCase(ctrl *gomock.Controller) *MockImageUseCase {
	mock := &MockImageUseCase{ctrl: ctrl}
	mock.recorder = &MockImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUseCase) EXPECT() *MockImageUseCaseMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageUseCase) CreateImage(image *multipart.FileHeader, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageUseCaseMockRecorder) CreateImage(image, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageUseCase)(nil).CreateImage), image, bucket)
}

// GetImage mocks base method.
func (m *MockImageUseCase) GetImage(bucket, name string) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", bucket, name)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageUseCaseMockRecorder) GetImage(bucket, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageUseCase)(nil).GetImage), bucket, name)
}
