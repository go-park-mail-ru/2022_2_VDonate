// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/subscriptions/protobuf/subscriptions_grpc.pb.go

// Package mock_protobuf is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	protobuf "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/subscriptions/protobuf"
	protobuf0 "github.com/go-park-mail-ru/2022_2_VDonate/internal/microservices/users/protobuf"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSubscriptionsClient is a mock of SubscriptionsClient interface.
type MockSubscriptionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsClientMockRecorder
}

// MockSubscriptionsClientMockRecorder is the mock recorder for MockSubscriptionsClient.
type MockSubscriptionsClientMockRecorder struct {
	mock *MockSubscriptionsClient
}

// NewMockSubscriptionsClient creates a new mock instance.
func NewMockSubscriptionsClient(ctrl *gomock.Controller) *MockSubscriptionsClient {
	mock := &MockSubscriptionsClient{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsClient) EXPECT() *MockSubscriptionsClientMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockSubscriptionsClient) AddSubscription(ctx context.Context, in *protobuf.AuthorSubscription, opts ...grpc.CallOption) (*protobuf.AuthorSubscriptionID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSubscription", varargs...)
	ret0, _ := ret[0].(*protobuf.AuthorSubscriptionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSubscriptionsClientMockRecorder) AddSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockSubscriptionsClient)(nil).AddSubscription), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionsClient) DeleteSubscription(ctx context.Context, in *protobuf.AuthorSubscriptionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionsClientMockRecorder) DeleteSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionsClient)(nil).DeleteSubscription), varargs...)
}

// GetSubscriptionByID mocks base method.
func (m *MockSubscriptionsClient) GetSubscriptionByID(ctx context.Context, in *protobuf.AuthorSubscriptionID, opts ...grpc.CallOption) (*protobuf.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionByID", varargs...)
	ret0, _ := ret[0].(*protobuf.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockSubscriptionsClientMockRecorder) GetSubscriptionByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockSubscriptionsClient)(nil).GetSubscriptionByID), varargs...)
}

// GetSubscriptionByUserAndAuthorID mocks base method.
func (m *MockSubscriptionsClient) GetSubscriptionByUserAndAuthorID(ctx context.Context, in *protobuf0.UserAuthorPair, opts ...grpc.CallOption) (*protobuf.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionByUserAndAuthorID", varargs...)
	ret0, _ := ret[0].(*protobuf.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByUserAndAuthorID indicates an expected call of GetSubscriptionByUserAndAuthorID.
func (mr *MockSubscriptionsClientMockRecorder) GetSubscriptionByUserAndAuthorID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByUserAndAuthorID", reflect.TypeOf((*MockSubscriptionsClient)(nil).GetSubscriptionByUserAndAuthorID), varargs...)
}

// GetSubscriptionsByAuthorID mocks base method.
func (m *MockSubscriptionsClient) GetSubscriptionsByAuthorID(ctx context.Context, in *protobuf0.UserID, opts ...grpc.CallOption) (*protobuf.SubArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionsByAuthorID", varargs...)
	ret0, _ := ret[0].(*protobuf.SubArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByAuthorID indicates an expected call of GetSubscriptionsByAuthorID.
func (mr *MockSubscriptionsClientMockRecorder) GetSubscriptionsByAuthorID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByAuthorID", reflect.TypeOf((*MockSubscriptionsClient)(nil).GetSubscriptionsByAuthorID), varargs...)
}

// GetSubscriptionsByUserID mocks base method.
func (m *MockSubscriptionsClient) GetSubscriptionsByUserID(ctx context.Context, in *protobuf0.UserID, opts ...grpc.CallOption) (*protobuf.SubArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionsByUserID", varargs...)
	ret0, _ := ret[0].(*protobuf.SubArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUserID indicates an expected call of GetSubscriptionsByUserID.
func (mr *MockSubscriptionsClientMockRecorder) GetSubscriptionsByUserID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUserID", reflect.TypeOf((*MockSubscriptionsClient)(nil).GetSubscriptionsByUserID), varargs...)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionsClient) UpdateSubscription(ctx context.Context, in *protobuf.AuthorSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscription", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionsClientMockRecorder) UpdateSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionsClient)(nil).UpdateSubscription), varargs...)
}

// MockSubscriptionsServer is a mock of SubscriptionsServer interface.
type MockSubscriptionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsServerMockRecorder
}

// MockSubscriptionsServerMockRecorder is the mock recorder for MockSubscriptionsServer.
type MockSubscriptionsServerMockRecorder struct {
	mock *MockSubscriptionsServer
}

// NewMockSubscriptionsServer creates a new mock instance.
func NewMockSubscriptionsServer(ctrl *gomock.Controller) *MockSubscriptionsServer {
	mock := &MockSubscriptionsServer{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsServer) EXPECT() *MockSubscriptionsServerMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockSubscriptionsServer) AddSubscription(arg0 context.Context, arg1 *protobuf.AuthorSubscription) (*protobuf.AuthorSubscriptionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.AuthorSubscriptionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSubscriptionsServerMockRecorder) AddSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockSubscriptionsServer)(nil).AddSubscription), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionsServer) DeleteSubscription(arg0 context.Context, arg1 *protobuf.AuthorSubscriptionID) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionsServerMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionsServer)(nil).DeleteSubscription), arg0, arg1)
}

// GetSubscriptionByID mocks base method.
func (m *MockSubscriptionsServer) GetSubscriptionByID(arg0 context.Context, arg1 *protobuf.AuthorSubscriptionID) (*protobuf.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByID", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockSubscriptionsServerMockRecorder) GetSubscriptionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockSubscriptionsServer)(nil).GetSubscriptionByID), arg0, arg1)
}

// GetSubscriptionByUserAndAuthorID mocks base method.
func (m *MockSubscriptionsServer) GetSubscriptionByUserAndAuthorID(arg0 context.Context, arg1 *protobuf0.UserAuthorPair) (*protobuf.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByUserAndAuthorID", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByUserAndAuthorID indicates an expected call of GetSubscriptionByUserAndAuthorID.
func (mr *MockSubscriptionsServerMockRecorder) GetSubscriptionByUserAndAuthorID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByUserAndAuthorID", reflect.TypeOf((*MockSubscriptionsServer)(nil).GetSubscriptionByUserAndAuthorID), arg0, arg1)
}

// GetSubscriptionsByAuthorID mocks base method.
func (m *MockSubscriptionsServer) GetSubscriptionsByAuthorID(arg0 context.Context, arg1 *protobuf0.UserID) (*protobuf.SubArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByAuthorID", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.SubArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByAuthorID indicates an expected call of GetSubscriptionsByAuthorID.
func (mr *MockSubscriptionsServerMockRecorder) GetSubscriptionsByAuthorID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByAuthorID", reflect.TypeOf((*MockSubscriptionsServer)(nil).GetSubscriptionsByAuthorID), arg0, arg1)
}

// GetSubscriptionsByUserID mocks base method.
func (m *MockSubscriptionsServer) GetSubscriptionsByUserID(arg0 context.Context, arg1 *protobuf0.UserID) (*protobuf.SubArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.SubArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUserID indicates an expected call of GetSubscriptionsByUserID.
func (mr *MockSubscriptionsServerMockRecorder) GetSubscriptionsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUserID", reflect.TypeOf((*MockSubscriptionsServer)(nil).GetSubscriptionsByUserID), arg0, arg1)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionsServer) UpdateSubscription(arg0 context.Context, arg1 *protobuf.AuthorSubscription) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionsServerMockRecorder) UpdateSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionsServer)(nil).UpdateSubscription), arg0, arg1)
}

// mustEmbedUnimplementedSubscriptionsServer mocks base method.
func (m *MockSubscriptionsServer) mustEmbedUnimplementedSubscriptionsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSubscriptionsServer")
}

// mustEmbedUnimplementedSubscriptionsServer indicates an expected call of mustEmbedUnimplementedSubscriptionsServer.
func (mr *MockSubscriptionsServerMockRecorder) mustEmbedUnimplementedSubscriptionsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSubscriptionsServer", reflect.TypeOf((*MockSubscriptionsServer)(nil).mustEmbedUnimplementedSubscriptionsServer))
}

// MockUnsafeSubscriptionsServer is a mock of UnsafeSubscriptionsServer interface.
type MockUnsafeSubscriptionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSubscriptionsServerMockRecorder
}

// MockUnsafeSubscriptionsServerMockRecorder is the mock recorder for MockUnsafeSubscriptionsServer.
type MockUnsafeSubscriptionsServerMockRecorder struct {
	mock *MockUnsafeSubscriptionsServer
}

// NewMockUnsafeSubscriptionsServer creates a new mock instance.
func NewMockUnsafeSubscriptionsServer(ctrl *gomock.Controller) *MockUnsafeSubscriptionsServer {
	mock := &MockUnsafeSubscriptionsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSubscriptionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSubscriptionsServer) EXPECT() *MockUnsafeSubscriptionsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSubscriptionsServer mocks base method.
func (m *MockUnsafeSubscriptionsServer) mustEmbedUnimplementedSubscriptionsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSubscriptionsServer")
}

// mustEmbedUnimplementedSubscriptionsServer indicates an expected call of mustEmbedUnimplementedSubscriptionsServer.
func (mr *MockUnsafeSubscriptionsServerMockRecorder) mustEmbedUnimplementedSubscriptionsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSubscriptionsServer", reflect.TypeOf((*MockUnsafeSubscriptionsServer)(nil).mustEmbedUnimplementedSubscriptionsServer))
}
