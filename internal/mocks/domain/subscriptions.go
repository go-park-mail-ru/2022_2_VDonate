// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/subscriptions.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionsUseCase is a mock of SubscriptionsUseCase interface.
type MockSubscriptionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsUseCaseMockRecorder
}

// MockSubscriptionsUseCaseMockRecorder is the mock recorder for MockSubscriptionsUseCase.
type MockSubscriptionsUseCaseMockRecorder struct {
	mock *MockSubscriptionsUseCase
}

// NewMockSubscriptionsUseCase creates a new mock instance.
func NewMockSubscriptionsUseCase(ctrl *gomock.Controller) *MockSubscriptionsUseCase {
	mock := &MockSubscriptionsUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsUseCase) EXPECT() *MockSubscriptionsUseCaseMockRecorder {
	return m.recorder
}

// AddAuthorSubscription mocks base method.
func (m *MockSubscriptionsUseCase) AddAuthorSubscription(sub models.AuthorSubscription) (*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthorSubscription", sub)
	ret0, _ := ret[0].(*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthorSubscription indicates an expected call of AddAuthorSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) AddAuthorSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthorSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).AddAuthorSubscription), sub)
}

// DeleteAuthorSubscription mocks base method.
func (m *MockSubscriptionsUseCase) DeleteAuthorSubscription(subID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorSubscription", subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorSubscription indicates an expected call of DeleteAuthorSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) DeleteAuthorSubscription(subID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).DeleteAuthorSubscription), subID)
}

// GetAuthorSubscriptionByID mocks base method.
func (m *MockSubscriptionsUseCase) GetAuthorSubscriptionByID(ID uint64) (*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorSubscriptionByID", ID)
	ret0, _ := ret[0].(*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorSubscriptionByID indicates an expected call of GetAuthorSubscriptionByID.
func (mr *MockSubscriptionsUseCaseMockRecorder) GetAuthorSubscriptionByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorSubscriptionByID", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).GetAuthorSubscriptionByID), ID)
}

// GetAuthorSubscriptionsByAuthorID mocks base method.
func (m *MockSubscriptionsUseCase) GetAuthorSubscriptionsByAuthorID(authorID uint64) ([]*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorSubscriptionsByAuthorID", authorID)
	ret0, _ := ret[0].([]*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorSubscriptionsByAuthorID indicates an expected call of GetAuthorSubscriptionsByAuthorID.
func (mr *MockSubscriptionsUseCaseMockRecorder) GetAuthorSubscriptionsByAuthorID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorSubscriptionsByAuthorID", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).GetAuthorSubscriptionsByAuthorID), authorID)
}

// GetSubscriptionsByUserID mocks base method.
func (m *MockSubscriptionsUseCase) GetSubscriptionsByUserID(userID uint64) ([]*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUserID", userID)
	ret0, _ := ret[0].([]*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUserID indicates an expected call of GetSubscriptionsByUserID.
func (mr *MockSubscriptionsUseCaseMockRecorder) GetSubscriptionsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUserID", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).GetSubscriptionsByUserID), userID)
}

// UpdateAuthorSubscription mocks base method.
func (m *MockSubscriptionsUseCase) UpdateAuthorSubscription(sub models.AuthorSubscription) (*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorSubscription", sub)
	ret0, _ := ret[0].(*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorSubscription indicates an expected call of UpdateAuthorSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) UpdateAuthorSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).UpdateAuthorSubscription), sub)
}
