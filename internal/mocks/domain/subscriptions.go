// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/subscriptions.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionsUseCase is a mock of SubscriptionsUseCase interface.
type MockSubscriptionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsUseCaseMockRecorder
}

// MockSubscriptionsUseCaseMockRecorder is the mock recorder for MockSubscriptionsUseCase.
type MockSubscriptionsUseCaseMockRecorder struct {
	mock *MockSubscriptionsUseCase
}

// NewMockSubscriptionsUseCase creates a new mock instance.
func NewMockSubscriptionsUseCase(ctrl *gomock.Controller) *MockSubscriptionsUseCase {
	mock := &MockSubscriptionsUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsUseCase) EXPECT() *MockSubscriptionsUseCaseMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockSubscriptionsUseCase) AddSubscription(sub models.AuthorSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) AddSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).AddSubscription), sub)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionsUseCase) DeleteSubscription(subID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) DeleteSubscription(subID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).DeleteSubscription), subID)
}

// GetSubscriptionsByAuthorID mocks base method.
func (m *MockSubscriptionsUseCase) GetSubscriptionsByAuthorID(authorID uint64) ([]*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByAuthorID", authorID)
	ret0, _ := ret[0].([]*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByAuthorID indicates an expected call of GetSubscriptionsByAuthorID.
func (mr *MockSubscriptionsUseCaseMockRecorder) GetSubscriptionsByAuthorID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByAuthorID", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).GetSubscriptionsByAuthorID), authorID)
}

// GetSubscriptionsByID mocks base method.
func (m *MockSubscriptionsUseCase) GetSubscriptionsByID(ID uint64) (*models.AuthorSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByID", ID)
	ret0, _ := ret[0].(*models.AuthorSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByID indicates an expected call of GetSubscriptionsByID.
func (mr *MockSubscriptionsUseCaseMockRecorder) GetSubscriptionsByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByID", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).GetSubscriptionsByID), ID)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionsUseCase) UpdateSubscription(sub models.AuthorSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionsUseCaseMockRecorder) UpdateSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionsUseCase)(nil).UpdateSubscription), sub)
}
