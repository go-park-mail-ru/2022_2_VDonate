// Code generated by MockGen. DO NOT EDIT.
// Source: internal/posts/usecase/posts_usecase.go

// Package mock_posts is a generated GoMock package.
package mock_posts

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2022_2_VDonate/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUseCase) Create(post *models.PostDB) (*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), post)
}

// DeleteInUserByID mocks base method.
func (m *MockUseCase) DeleteInUserByID(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInUserByID", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInUserByID indicates an expected call of DeleteInUserByID.
func (mr *MockUseCaseMockRecorder) DeleteInUserByID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInUserByID", reflect.TypeOf((*MockUseCase)(nil).DeleteInUserByID), userID, postID)
}

// GetPostByID mocks base method.
func (m *MockUseCase) GetPostByID(postID uint64) (*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockUseCaseMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockUseCase)(nil).GetPostByID), postID)
}

// GetPostsByUserID mocks base method.
func (m *MockUseCase) GetPostsByUserID(id uint64) ([]*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserID", id)
	ret0, _ := ret[0].([]*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserID indicates an expected call of GetPostsByUserID.
func (mr *MockUseCaseMockRecorder) GetPostsByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserID", reflect.TypeOf((*MockUseCase)(nil).GetPostsByUserID), id)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Create mocks base method.
func (m *MockRepository) Create(post *models.PostDB) (*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), post)
}

// DeleteInUserByID mocks base method.
func (m *MockRepository) DeleteInUserByID(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInUserByID", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInUserByID indicates an expected call of DeleteInUserByID.
func (mr *MockRepositoryMockRecorder) DeleteInUserByID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInUserByID", reflect.TypeOf((*MockRepository)(nil).DeleteInUserByID), userID, postID)
}

// GetAllByUserID mocks base method.
func (m *MockRepository) GetAllByUserID(userID uint64) ([]*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", userID)
	ret0, _ := ret[0].([]*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockRepositoryMockRecorder) GetAllByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockRepository)(nil).GetAllByUserID), userID)
}

// GetPostByID mocks base method.
func (m *MockRepository) GetPostByID(postID uint64) (*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockRepositoryMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockRepository)(nil).GetPostByID), postID)
}

// GetPostByUserID mocks base method.
func (m *MockRepository) GetPostByUserID(userID, postID uint64) (*models.PostDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByUserID", userID, postID)
	ret0, _ := ret[0].(*models.PostDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByUserID indicates an expected call of GetPostByUserID.
func (mr *MockRepositoryMockRecorder) GetPostByUserID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByUserID", reflect.TypeOf((*MockRepository)(nil).GetPostByUserID), userID, postID)
}
